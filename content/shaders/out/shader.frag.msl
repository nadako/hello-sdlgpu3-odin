#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

struct type_Global
{
    float3 lightPosition;
    packed_float3 lightColor;
    float lightIntensity;
};

struct main0_out
{
    float4 out_var_SV_Target0 [[color(0)]];
};

struct main0_in
{
    float3 in_var_TEXCOORD2 [[user(locn2)]];
    float3 in_var_TEXCOORD3 [[user(locn3)]];
};

fragment main0_out main0(main0_in in [[stage_in]], constant type_Global& Global [[buffer(0)]])
{
    main0_out out = {};
    float3 _31 = Global.lightPosition - in.in_var_TEXCOORD2;
    float _32 = length(_31);
    float _36 = dot(_31 / float3(_32), fast::normalize(in.in_var_TEXCOORD3));
    float3 _50;
    if (_36 > 0.0)
    {
        _50 = ((float3(Global.lightColor) * Global.lightIntensity) * _36) * (1.0 / (_32 * _32));
    }
    else
    {
        _50 = float3(0.0);
    }
    out.out_var_SV_Target0 = float4(_50, 1.0);
    return out;
}

